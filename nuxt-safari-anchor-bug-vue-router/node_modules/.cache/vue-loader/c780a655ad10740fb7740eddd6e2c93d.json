{"remainingRequest":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/src/App.vue","mtime":1626631991701},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js","mtime":1614329285102},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1623507332817},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js","mtime":1614329285102},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/index.js","mtime":1623507332817}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}