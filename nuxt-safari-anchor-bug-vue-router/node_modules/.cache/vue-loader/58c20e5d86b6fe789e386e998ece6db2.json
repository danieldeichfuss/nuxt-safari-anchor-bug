{"remainingRequest":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/src/views/Home.vue","mtime":1626632484278},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js","mtime":1614329285102},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1623507332817},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/cache-loader/dist/cjs.js","mtime":1614329285102},{"path":"/Users/daniel/nuxt-safari-anchor-bug/nuxt-safari-anchor-bug-vue-router/node_modules/vue-loader/lib/index.js","mtime":1623507332817}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}